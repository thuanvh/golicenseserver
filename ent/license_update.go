// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thuanvh/golicenseserver/ent/license"
	"github.com/thuanvh/golicenseserver/ent/predicate"
)

// LicenseUpdate is the builder for updating License entities.
type LicenseUpdate struct {
	config
	hooks    []Hook
	mutation *LicenseMutation
}

// Where appends a list predicates to the LicenseUpdate builder.
func (lu *LicenseUpdate) Where(ps ...predicate.License) *LicenseUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetName sets the "name" field.
func (lu *LicenseUpdate) SetName(s string) *LicenseUpdate {
	lu.mutation.SetName(s)
	return lu
}

// SetDuration sets the "duration" field.
func (lu *LicenseUpdate) SetDuration(i int) *LicenseUpdate {
	lu.mutation.ResetDuration()
	lu.mutation.SetDuration(i)
	return lu
}

// AddDuration adds i to the "duration" field.
func (lu *LicenseUpdate) AddDuration(i int) *LicenseUpdate {
	lu.mutation.AddDuration(i)
	return lu
}

// SetCPU sets the "cpu" field.
func (lu *LicenseUpdate) SetCPU(i int) *LicenseUpdate {
	lu.mutation.ResetCPU()
	lu.mutation.SetCPU(i)
	return lu
}

// SetNillableCPU sets the "cpu" field if the given value is not nil.
func (lu *LicenseUpdate) SetNillableCPU(i *int) *LicenseUpdate {
	if i != nil {
		lu.SetCPU(*i)
	}
	return lu
}

// AddCPU adds i to the "cpu" field.
func (lu *LicenseUpdate) AddCPU(i int) *LicenseUpdate {
	lu.mutation.AddCPU(i)
	return lu
}

// SetStorage sets the "storage" field.
func (lu *LicenseUpdate) SetStorage(i int) *LicenseUpdate {
	lu.mutation.ResetStorage()
	lu.mutation.SetStorage(i)
	return lu
}

// SetNillableStorage sets the "storage" field if the given value is not nil.
func (lu *LicenseUpdate) SetNillableStorage(i *int) *LicenseUpdate {
	if i != nil {
		lu.SetStorage(*i)
	}
	return lu
}

// AddStorage adds i to the "storage" field.
func (lu *LicenseUpdate) AddStorage(i int) *LicenseUpdate {
	lu.mutation.AddStorage(i)
	return lu
}

// SetNumberOfNodes sets the "number_of_nodes" field.
func (lu *LicenseUpdate) SetNumberOfNodes(i int) *LicenseUpdate {
	lu.mutation.ResetNumberOfNodes()
	lu.mutation.SetNumberOfNodes(i)
	return lu
}

// SetNillableNumberOfNodes sets the "number_of_nodes" field if the given value is not nil.
func (lu *LicenseUpdate) SetNillableNumberOfNodes(i *int) *LicenseUpdate {
	if i != nil {
		lu.SetNumberOfNodes(*i)
	}
	return lu
}

// AddNumberOfNodes adds i to the "number_of_nodes" field.
func (lu *LicenseUpdate) AddNumberOfNodes(i int) *LicenseUpdate {
	lu.mutation.AddNumberOfNodes(i)
	return lu
}

// Mutation returns the LicenseMutation object of the builder.
func (lu *LicenseUpdate) Mutation() *LicenseMutation {
	return lu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LicenseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(lu.hooks) == 0 {
		if err = lu.check(); err != nil {
			return 0, err
		}
		affected, err = lu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LicenseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lu.check(); err != nil {
				return 0, err
			}
			lu.mutation = mutation
			affected, err = lu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lu.hooks) - 1; i >= 0; i-- {
			if lu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LicenseUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LicenseUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LicenseUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LicenseUpdate) check() error {
	if v, ok := lu.mutation.Name(); ok {
		if err := license.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "License.name": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Duration(); ok {
		if err := license.DurationValidator(v); err != nil {
			return &ValidationError{Name: "duration", err: fmt.Errorf(`ent: validator failed for field "License.duration": %w`, err)}
		}
	}
	return nil
}

func (lu *LicenseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   license.Table,
			Columns: license.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: license.FieldID,
			},
		},
	}
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: license.FieldName,
		})
	}
	if value, ok := lu.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: license.FieldDuration,
		})
	}
	if value, ok := lu.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: license.FieldDuration,
		})
	}
	if value, ok := lu.mutation.CPU(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: license.FieldCPU,
		})
	}
	if value, ok := lu.mutation.AddedCPU(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: license.FieldCPU,
		})
	}
	if value, ok := lu.mutation.Storage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: license.FieldStorage,
		})
	}
	if value, ok := lu.mutation.AddedStorage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: license.FieldStorage,
		})
	}
	if value, ok := lu.mutation.NumberOfNodes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: license.FieldNumberOfNodes,
		})
	}
	if value, ok := lu.mutation.AddedNumberOfNodes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: license.FieldNumberOfNodes,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{license.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// LicenseUpdateOne is the builder for updating a single License entity.
type LicenseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LicenseMutation
}

// SetName sets the "name" field.
func (luo *LicenseUpdateOne) SetName(s string) *LicenseUpdateOne {
	luo.mutation.SetName(s)
	return luo
}

// SetDuration sets the "duration" field.
func (luo *LicenseUpdateOne) SetDuration(i int) *LicenseUpdateOne {
	luo.mutation.ResetDuration()
	luo.mutation.SetDuration(i)
	return luo
}

// AddDuration adds i to the "duration" field.
func (luo *LicenseUpdateOne) AddDuration(i int) *LicenseUpdateOne {
	luo.mutation.AddDuration(i)
	return luo
}

// SetCPU sets the "cpu" field.
func (luo *LicenseUpdateOne) SetCPU(i int) *LicenseUpdateOne {
	luo.mutation.ResetCPU()
	luo.mutation.SetCPU(i)
	return luo
}

// SetNillableCPU sets the "cpu" field if the given value is not nil.
func (luo *LicenseUpdateOne) SetNillableCPU(i *int) *LicenseUpdateOne {
	if i != nil {
		luo.SetCPU(*i)
	}
	return luo
}

// AddCPU adds i to the "cpu" field.
func (luo *LicenseUpdateOne) AddCPU(i int) *LicenseUpdateOne {
	luo.mutation.AddCPU(i)
	return luo
}

// SetStorage sets the "storage" field.
func (luo *LicenseUpdateOne) SetStorage(i int) *LicenseUpdateOne {
	luo.mutation.ResetStorage()
	luo.mutation.SetStorage(i)
	return luo
}

// SetNillableStorage sets the "storage" field if the given value is not nil.
func (luo *LicenseUpdateOne) SetNillableStorage(i *int) *LicenseUpdateOne {
	if i != nil {
		luo.SetStorage(*i)
	}
	return luo
}

// AddStorage adds i to the "storage" field.
func (luo *LicenseUpdateOne) AddStorage(i int) *LicenseUpdateOne {
	luo.mutation.AddStorage(i)
	return luo
}

// SetNumberOfNodes sets the "number_of_nodes" field.
func (luo *LicenseUpdateOne) SetNumberOfNodes(i int) *LicenseUpdateOne {
	luo.mutation.ResetNumberOfNodes()
	luo.mutation.SetNumberOfNodes(i)
	return luo
}

// SetNillableNumberOfNodes sets the "number_of_nodes" field if the given value is not nil.
func (luo *LicenseUpdateOne) SetNillableNumberOfNodes(i *int) *LicenseUpdateOne {
	if i != nil {
		luo.SetNumberOfNodes(*i)
	}
	return luo
}

// AddNumberOfNodes adds i to the "number_of_nodes" field.
func (luo *LicenseUpdateOne) AddNumberOfNodes(i int) *LicenseUpdateOne {
	luo.mutation.AddNumberOfNodes(i)
	return luo
}

// Mutation returns the LicenseMutation object of the builder.
func (luo *LicenseUpdateOne) Mutation() *LicenseMutation {
	return luo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LicenseUpdateOne) Select(field string, fields ...string) *LicenseUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated License entity.
func (luo *LicenseUpdateOne) Save(ctx context.Context) (*License, error) {
	var (
		err  error
		node *License
	)
	if len(luo.hooks) == 0 {
		if err = luo.check(); err != nil {
			return nil, err
		}
		node, err = luo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LicenseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = luo.check(); err != nil {
				return nil, err
			}
			luo.mutation = mutation
			node, err = luo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(luo.hooks) - 1; i >= 0; i-- {
			if luo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = luo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LicenseUpdateOne) SaveX(ctx context.Context) *License {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LicenseUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LicenseUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LicenseUpdateOne) check() error {
	if v, ok := luo.mutation.Name(); ok {
		if err := license.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "License.name": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Duration(); ok {
		if err := license.DurationValidator(v); err != nil {
			return &ValidationError{Name: "duration", err: fmt.Errorf(`ent: validator failed for field "License.duration": %w`, err)}
		}
	}
	return nil
}

func (luo *LicenseUpdateOne) sqlSave(ctx context.Context) (_node *License, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   license.Table,
			Columns: license.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: license.FieldID,
			},
		},
	}
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "License.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, license.FieldID)
		for _, f := range fields {
			if !license.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != license.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: license.FieldName,
		})
	}
	if value, ok := luo.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: license.FieldDuration,
		})
	}
	if value, ok := luo.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: license.FieldDuration,
		})
	}
	if value, ok := luo.mutation.CPU(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: license.FieldCPU,
		})
	}
	if value, ok := luo.mutation.AddedCPU(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: license.FieldCPU,
		})
	}
	if value, ok := luo.mutation.Storage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: license.FieldStorage,
		})
	}
	if value, ok := luo.mutation.AddedStorage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: license.FieldStorage,
		})
	}
	if value, ok := luo.mutation.NumberOfNodes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: license.FieldNumberOfNodes,
		})
	}
	if value, ok := luo.mutation.AddedNumberOfNodes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: license.FieldNumberOfNodes,
		})
	}
	_node = &License{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{license.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
