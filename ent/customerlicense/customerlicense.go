// Code generated by entc, DO NOT EDIT.

package customerlicense

import (
	"time"
)

const (
	// Label holds the string label denoting the customerlicense type in the database.
	Label = "customer_license"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLicenseCode holds the string denoting the license_code field in the database.
	FieldLicenseCode = "license_code"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldCPU holds the string denoting the cpu field in the database.
	FieldCPU = "cpu"
	// FieldStorage holds the string denoting the storage field in the database.
	FieldStorage = "storage"
	// FieldNumberOfNodes holds the string denoting the number_of_nodes field in the database.
	FieldNumberOfNodes = "number_of_nodes"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// EdgeLicense holds the string denoting the license edge name in mutations.
	EdgeLicense = "license"
	// Table holds the table name of the customerlicense in the database.
	Table = "customer_licenses"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "customer_licenses"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customers"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "customer_license_customer"
	// LicenseTable is the table that holds the license relation/edge.
	LicenseTable = "licenses"
	// LicenseInverseTable is the table name for the License entity.
	// It exists in this package in order to avoid circular dependency with the "license" package.
	LicenseInverseTable = "licenses"
	// LicenseColumn is the table column denoting the license relation/edge.
	LicenseColumn = "customer_license_license"
)

// Columns holds all SQL columns for customerlicense fields.
var Columns = []string{
	FieldID,
	FieldLicenseCode,
	FieldActive,
	FieldStartDate,
	FieldEndDate,
	FieldCPU,
	FieldStorage,
	FieldNumberOfNodes,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "customer_licenses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"customer_license_customer",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// LicenseCodeValidator is a validator for the "license_code" field. It is called by the builders before save.
	LicenseCodeValidator func(string) error
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultStartDate holds the default value on creation for the "start_date" field.
	DefaultStartDate func() time.Time
	// DefaultEndDate holds the default value on creation for the "end_date" field.
	DefaultEndDate func() time.Time
	// DefaultCPU holds the default value on creation for the "cpu" field.
	DefaultCPU int
	// DefaultStorage holds the default value on creation for the "storage" field.
	DefaultStorage int
	// DefaultNumberOfNodes holds the default value on creation for the "number_of_nodes" field.
	DefaultNumberOfNodes int
)
