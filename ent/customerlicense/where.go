// Code generated by entc, DO NOT EDIT.

package customerlicense

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/thuanvh/golicenseserver/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// LicenseCode applies equality check predicate on the "license_code" field. It's identical to LicenseCodeEQ.
func LicenseCode(v string) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLicenseCode), v))
	})
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	})
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartDate), v))
	})
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndDate), v))
	})
}

// CPU applies equality check predicate on the "cpu" field. It's identical to CPUEQ.
func CPU(v int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCPU), v))
	})
}

// Storage applies equality check predicate on the "storage" field. It's identical to StorageEQ.
func Storage(v int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStorage), v))
	})
}

// NumberOfNodes applies equality check predicate on the "number_of_nodes" field. It's identical to NumberOfNodesEQ.
func NumberOfNodes(v int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumberOfNodes), v))
	})
}

// LicenseCodeEQ applies the EQ predicate on the "license_code" field.
func LicenseCodeEQ(v string) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLicenseCode), v))
	})
}

// LicenseCodeNEQ applies the NEQ predicate on the "license_code" field.
func LicenseCodeNEQ(v string) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLicenseCode), v))
	})
}

// LicenseCodeIn applies the In predicate on the "license_code" field.
func LicenseCodeIn(vs ...string) predicate.CustomerLicense {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerLicense(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLicenseCode), v...))
	})
}

// LicenseCodeNotIn applies the NotIn predicate on the "license_code" field.
func LicenseCodeNotIn(vs ...string) predicate.CustomerLicense {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerLicense(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLicenseCode), v...))
	})
}

// LicenseCodeGT applies the GT predicate on the "license_code" field.
func LicenseCodeGT(v string) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLicenseCode), v))
	})
}

// LicenseCodeGTE applies the GTE predicate on the "license_code" field.
func LicenseCodeGTE(v string) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLicenseCode), v))
	})
}

// LicenseCodeLT applies the LT predicate on the "license_code" field.
func LicenseCodeLT(v string) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLicenseCode), v))
	})
}

// LicenseCodeLTE applies the LTE predicate on the "license_code" field.
func LicenseCodeLTE(v string) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLicenseCode), v))
	})
}

// LicenseCodeContains applies the Contains predicate on the "license_code" field.
func LicenseCodeContains(v string) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLicenseCode), v))
	})
}

// LicenseCodeHasPrefix applies the HasPrefix predicate on the "license_code" field.
func LicenseCodeHasPrefix(v string) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLicenseCode), v))
	})
}

// LicenseCodeHasSuffix applies the HasSuffix predicate on the "license_code" field.
func LicenseCodeHasSuffix(v string) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLicenseCode), v))
	})
}

// LicenseCodeEqualFold applies the EqualFold predicate on the "license_code" field.
func LicenseCodeEqualFold(v string) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLicenseCode), v))
	})
}

// LicenseCodeContainsFold applies the ContainsFold predicate on the "license_code" field.
func LicenseCodeContainsFold(v string) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLicenseCode), v))
	})
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	})
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActive), v))
	})
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartDate), v))
	})
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartDate), v))
	})
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.CustomerLicense {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerLicense(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStartDate), v...))
	})
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.CustomerLicense {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerLicense(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStartDate), v...))
	})
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartDate), v))
	})
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartDate), v))
	})
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartDate), v))
	})
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartDate), v))
	})
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndDate), v))
	})
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndDate), v))
	})
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.CustomerLicense {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerLicense(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndDate), v...))
	})
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.CustomerLicense {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerLicense(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndDate), v...))
	})
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndDate), v))
	})
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndDate), v))
	})
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndDate), v))
	})
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndDate), v))
	})
}

// CPUEQ applies the EQ predicate on the "cpu" field.
func CPUEQ(v int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCPU), v))
	})
}

// CPUNEQ applies the NEQ predicate on the "cpu" field.
func CPUNEQ(v int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCPU), v))
	})
}

// CPUIn applies the In predicate on the "cpu" field.
func CPUIn(vs ...int) predicate.CustomerLicense {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerLicense(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCPU), v...))
	})
}

// CPUNotIn applies the NotIn predicate on the "cpu" field.
func CPUNotIn(vs ...int) predicate.CustomerLicense {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerLicense(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCPU), v...))
	})
}

// CPUGT applies the GT predicate on the "cpu" field.
func CPUGT(v int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCPU), v))
	})
}

// CPUGTE applies the GTE predicate on the "cpu" field.
func CPUGTE(v int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCPU), v))
	})
}

// CPULT applies the LT predicate on the "cpu" field.
func CPULT(v int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCPU), v))
	})
}

// CPULTE applies the LTE predicate on the "cpu" field.
func CPULTE(v int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCPU), v))
	})
}

// StorageEQ applies the EQ predicate on the "storage" field.
func StorageEQ(v int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStorage), v))
	})
}

// StorageNEQ applies the NEQ predicate on the "storage" field.
func StorageNEQ(v int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStorage), v))
	})
}

// StorageIn applies the In predicate on the "storage" field.
func StorageIn(vs ...int) predicate.CustomerLicense {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerLicense(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStorage), v...))
	})
}

// StorageNotIn applies the NotIn predicate on the "storage" field.
func StorageNotIn(vs ...int) predicate.CustomerLicense {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerLicense(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStorage), v...))
	})
}

// StorageGT applies the GT predicate on the "storage" field.
func StorageGT(v int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStorage), v))
	})
}

// StorageGTE applies the GTE predicate on the "storage" field.
func StorageGTE(v int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStorage), v))
	})
}

// StorageLT applies the LT predicate on the "storage" field.
func StorageLT(v int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStorage), v))
	})
}

// StorageLTE applies the LTE predicate on the "storage" field.
func StorageLTE(v int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStorage), v))
	})
}

// NumberOfNodesEQ applies the EQ predicate on the "number_of_nodes" field.
func NumberOfNodesEQ(v int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumberOfNodes), v))
	})
}

// NumberOfNodesNEQ applies the NEQ predicate on the "number_of_nodes" field.
func NumberOfNodesNEQ(v int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNumberOfNodes), v))
	})
}

// NumberOfNodesIn applies the In predicate on the "number_of_nodes" field.
func NumberOfNodesIn(vs ...int) predicate.CustomerLicense {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerLicense(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNumberOfNodes), v...))
	})
}

// NumberOfNodesNotIn applies the NotIn predicate on the "number_of_nodes" field.
func NumberOfNodesNotIn(vs ...int) predicate.CustomerLicense {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerLicense(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNumberOfNodes), v...))
	})
}

// NumberOfNodesGT applies the GT predicate on the "number_of_nodes" field.
func NumberOfNodesGT(v int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNumberOfNodes), v))
	})
}

// NumberOfNodesGTE applies the GTE predicate on the "number_of_nodes" field.
func NumberOfNodesGTE(v int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNumberOfNodes), v))
	})
}

// NumberOfNodesLT applies the LT predicate on the "number_of_nodes" field.
func NumberOfNodesLT(v int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNumberOfNodes), v))
	})
}

// NumberOfNodesLTE applies the LTE predicate on the "number_of_nodes" field.
func NumberOfNodesLTE(v int) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNumberOfNodes), v))
	})
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CustomerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CustomerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLicense applies the HasEdge predicate on the "license" edge.
func HasLicense() predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LicenseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LicenseTable, LicenseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLicenseWith applies the HasEdge predicate on the "license" edge with a given conditions (other predicates).
func HasLicenseWith(preds ...predicate.License) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LicenseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LicenseTable, LicenseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CustomerLicense) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CustomerLicense) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CustomerLicense) predicate.CustomerLicense {
	return predicate.CustomerLicense(func(s *sql.Selector) {
		p(s.Not())
	})
}
