// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thuanvh/golicenseserver/ent/customer"
	"github.com/thuanvh/golicenseserver/ent/customerlicense"
	"github.com/thuanvh/golicenseserver/ent/license"
	"github.com/thuanvh/golicenseserver/ent/predicate"
)

// CustomerLicenseUpdate is the builder for updating CustomerLicense entities.
type CustomerLicenseUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerLicenseMutation
}

// Where appends a list predicates to the CustomerLicenseUpdate builder.
func (clu *CustomerLicenseUpdate) Where(ps ...predicate.CustomerLicense) *CustomerLicenseUpdate {
	clu.mutation.Where(ps...)
	return clu
}

// SetLicenseCode sets the "license_code" field.
func (clu *CustomerLicenseUpdate) SetLicenseCode(s string) *CustomerLicenseUpdate {
	clu.mutation.SetLicenseCode(s)
	return clu
}

// SetActive sets the "active" field.
func (clu *CustomerLicenseUpdate) SetActive(b bool) *CustomerLicenseUpdate {
	clu.mutation.SetActive(b)
	return clu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (clu *CustomerLicenseUpdate) SetNillableActive(b *bool) *CustomerLicenseUpdate {
	if b != nil {
		clu.SetActive(*b)
	}
	return clu
}

// SetStartDate sets the "start_date" field.
func (clu *CustomerLicenseUpdate) SetStartDate(t time.Time) *CustomerLicenseUpdate {
	clu.mutation.SetStartDate(t)
	return clu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (clu *CustomerLicenseUpdate) SetNillableStartDate(t *time.Time) *CustomerLicenseUpdate {
	if t != nil {
		clu.SetStartDate(*t)
	}
	return clu
}

// SetEndDate sets the "end_date" field.
func (clu *CustomerLicenseUpdate) SetEndDate(t time.Time) *CustomerLicenseUpdate {
	clu.mutation.SetEndDate(t)
	return clu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (clu *CustomerLicenseUpdate) SetNillableEndDate(t *time.Time) *CustomerLicenseUpdate {
	if t != nil {
		clu.SetEndDate(*t)
	}
	return clu
}

// SetCPU sets the "cpu" field.
func (clu *CustomerLicenseUpdate) SetCPU(i int) *CustomerLicenseUpdate {
	clu.mutation.ResetCPU()
	clu.mutation.SetCPU(i)
	return clu
}

// SetNillableCPU sets the "cpu" field if the given value is not nil.
func (clu *CustomerLicenseUpdate) SetNillableCPU(i *int) *CustomerLicenseUpdate {
	if i != nil {
		clu.SetCPU(*i)
	}
	return clu
}

// AddCPU adds i to the "cpu" field.
func (clu *CustomerLicenseUpdate) AddCPU(i int) *CustomerLicenseUpdate {
	clu.mutation.AddCPU(i)
	return clu
}

// SetStorage sets the "storage" field.
func (clu *CustomerLicenseUpdate) SetStorage(i int) *CustomerLicenseUpdate {
	clu.mutation.ResetStorage()
	clu.mutation.SetStorage(i)
	return clu
}

// SetNillableStorage sets the "storage" field if the given value is not nil.
func (clu *CustomerLicenseUpdate) SetNillableStorage(i *int) *CustomerLicenseUpdate {
	if i != nil {
		clu.SetStorage(*i)
	}
	return clu
}

// AddStorage adds i to the "storage" field.
func (clu *CustomerLicenseUpdate) AddStorage(i int) *CustomerLicenseUpdate {
	clu.mutation.AddStorage(i)
	return clu
}

// SetNumberOfNodes sets the "number_of_nodes" field.
func (clu *CustomerLicenseUpdate) SetNumberOfNodes(i int) *CustomerLicenseUpdate {
	clu.mutation.ResetNumberOfNodes()
	clu.mutation.SetNumberOfNodes(i)
	return clu
}

// SetNillableNumberOfNodes sets the "number_of_nodes" field if the given value is not nil.
func (clu *CustomerLicenseUpdate) SetNillableNumberOfNodes(i *int) *CustomerLicenseUpdate {
	if i != nil {
		clu.SetNumberOfNodes(*i)
	}
	return clu
}

// AddNumberOfNodes adds i to the "number_of_nodes" field.
func (clu *CustomerLicenseUpdate) AddNumberOfNodes(i int) *CustomerLicenseUpdate {
	clu.mutation.AddNumberOfNodes(i)
	return clu
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (clu *CustomerLicenseUpdate) SetCustomerID(id int) *CustomerLicenseUpdate {
	clu.mutation.SetCustomerID(id)
	return clu
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (clu *CustomerLicenseUpdate) SetNillableCustomerID(id *int) *CustomerLicenseUpdate {
	if id != nil {
		clu = clu.SetCustomerID(*id)
	}
	return clu
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (clu *CustomerLicenseUpdate) SetCustomer(c *Customer) *CustomerLicenseUpdate {
	return clu.SetCustomerID(c.ID)
}

// AddLicenseIDs adds the "license" edge to the License entity by IDs.
func (clu *CustomerLicenseUpdate) AddLicenseIDs(ids ...int) *CustomerLicenseUpdate {
	clu.mutation.AddLicenseIDs(ids...)
	return clu
}

// AddLicense adds the "license" edges to the License entity.
func (clu *CustomerLicenseUpdate) AddLicense(l ...*License) *CustomerLicenseUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return clu.AddLicenseIDs(ids...)
}

// Mutation returns the CustomerLicenseMutation object of the builder.
func (clu *CustomerLicenseUpdate) Mutation() *CustomerLicenseMutation {
	return clu.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (clu *CustomerLicenseUpdate) ClearCustomer() *CustomerLicenseUpdate {
	clu.mutation.ClearCustomer()
	return clu
}

// ClearLicense clears all "license" edges to the License entity.
func (clu *CustomerLicenseUpdate) ClearLicense() *CustomerLicenseUpdate {
	clu.mutation.ClearLicense()
	return clu
}

// RemoveLicenseIDs removes the "license" edge to License entities by IDs.
func (clu *CustomerLicenseUpdate) RemoveLicenseIDs(ids ...int) *CustomerLicenseUpdate {
	clu.mutation.RemoveLicenseIDs(ids...)
	return clu
}

// RemoveLicense removes "license" edges to License entities.
func (clu *CustomerLicenseUpdate) RemoveLicense(l ...*License) *CustomerLicenseUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return clu.RemoveLicenseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (clu *CustomerLicenseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(clu.hooks) == 0 {
		if err = clu.check(); err != nil {
			return 0, err
		}
		affected, err = clu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomerLicenseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = clu.check(); err != nil {
				return 0, err
			}
			clu.mutation = mutation
			affected, err = clu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(clu.hooks) - 1; i >= 0; i-- {
			if clu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = clu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, clu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (clu *CustomerLicenseUpdate) SaveX(ctx context.Context) int {
	affected, err := clu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (clu *CustomerLicenseUpdate) Exec(ctx context.Context) error {
	_, err := clu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clu *CustomerLicenseUpdate) ExecX(ctx context.Context) {
	if err := clu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clu *CustomerLicenseUpdate) check() error {
	if v, ok := clu.mutation.LicenseCode(); ok {
		if err := customerlicense.LicenseCodeValidator(v); err != nil {
			return &ValidationError{Name: "license_code", err: fmt.Errorf(`ent: validator failed for field "CustomerLicense.license_code": %w`, err)}
		}
	}
	return nil
}

func (clu *CustomerLicenseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   customerlicense.Table,
			Columns: customerlicense.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: customerlicense.FieldID,
			},
		},
	}
	if ps := clu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := clu.mutation.LicenseCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customerlicense.FieldLicenseCode,
		})
	}
	if value, ok := clu.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: customerlicense.FieldActive,
		})
	}
	if value, ok := clu.mutation.StartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customerlicense.FieldStartDate,
		})
	}
	if value, ok := clu.mutation.EndDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customerlicense.FieldEndDate,
		})
	}
	if value, ok := clu.mutation.CPU(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customerlicense.FieldCPU,
		})
	}
	if value, ok := clu.mutation.AddedCPU(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customerlicense.FieldCPU,
		})
	}
	if value, ok := clu.mutation.Storage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customerlicense.FieldStorage,
		})
	}
	if value, ok := clu.mutation.AddedStorage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customerlicense.FieldStorage,
		})
	}
	if value, ok := clu.mutation.NumberOfNodes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customerlicense.FieldNumberOfNodes,
		})
	}
	if value, ok := clu.mutation.AddedNumberOfNodes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customerlicense.FieldNumberOfNodes,
		})
	}
	if clu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerlicense.CustomerTable,
			Columns: []string{customerlicense.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerlicense.CustomerTable,
			Columns: []string{customerlicense.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if clu.mutation.LicenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customerlicense.LicenseTable,
			Columns: []string{customerlicense.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: license.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.RemovedLicenseIDs(); len(nodes) > 0 && !clu.mutation.LicenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customerlicense.LicenseTable,
			Columns: []string{customerlicense.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: license.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.LicenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customerlicense.LicenseTable,
			Columns: []string{customerlicense.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: license.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, clu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customerlicense.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CustomerLicenseUpdateOne is the builder for updating a single CustomerLicense entity.
type CustomerLicenseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerLicenseMutation
}

// SetLicenseCode sets the "license_code" field.
func (cluo *CustomerLicenseUpdateOne) SetLicenseCode(s string) *CustomerLicenseUpdateOne {
	cluo.mutation.SetLicenseCode(s)
	return cluo
}

// SetActive sets the "active" field.
func (cluo *CustomerLicenseUpdateOne) SetActive(b bool) *CustomerLicenseUpdateOne {
	cluo.mutation.SetActive(b)
	return cluo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (cluo *CustomerLicenseUpdateOne) SetNillableActive(b *bool) *CustomerLicenseUpdateOne {
	if b != nil {
		cluo.SetActive(*b)
	}
	return cluo
}

// SetStartDate sets the "start_date" field.
func (cluo *CustomerLicenseUpdateOne) SetStartDate(t time.Time) *CustomerLicenseUpdateOne {
	cluo.mutation.SetStartDate(t)
	return cluo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (cluo *CustomerLicenseUpdateOne) SetNillableStartDate(t *time.Time) *CustomerLicenseUpdateOne {
	if t != nil {
		cluo.SetStartDate(*t)
	}
	return cluo
}

// SetEndDate sets the "end_date" field.
func (cluo *CustomerLicenseUpdateOne) SetEndDate(t time.Time) *CustomerLicenseUpdateOne {
	cluo.mutation.SetEndDate(t)
	return cluo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (cluo *CustomerLicenseUpdateOne) SetNillableEndDate(t *time.Time) *CustomerLicenseUpdateOne {
	if t != nil {
		cluo.SetEndDate(*t)
	}
	return cluo
}

// SetCPU sets the "cpu" field.
func (cluo *CustomerLicenseUpdateOne) SetCPU(i int) *CustomerLicenseUpdateOne {
	cluo.mutation.ResetCPU()
	cluo.mutation.SetCPU(i)
	return cluo
}

// SetNillableCPU sets the "cpu" field if the given value is not nil.
func (cluo *CustomerLicenseUpdateOne) SetNillableCPU(i *int) *CustomerLicenseUpdateOne {
	if i != nil {
		cluo.SetCPU(*i)
	}
	return cluo
}

// AddCPU adds i to the "cpu" field.
func (cluo *CustomerLicenseUpdateOne) AddCPU(i int) *CustomerLicenseUpdateOne {
	cluo.mutation.AddCPU(i)
	return cluo
}

// SetStorage sets the "storage" field.
func (cluo *CustomerLicenseUpdateOne) SetStorage(i int) *CustomerLicenseUpdateOne {
	cluo.mutation.ResetStorage()
	cluo.mutation.SetStorage(i)
	return cluo
}

// SetNillableStorage sets the "storage" field if the given value is not nil.
func (cluo *CustomerLicenseUpdateOne) SetNillableStorage(i *int) *CustomerLicenseUpdateOne {
	if i != nil {
		cluo.SetStorage(*i)
	}
	return cluo
}

// AddStorage adds i to the "storage" field.
func (cluo *CustomerLicenseUpdateOne) AddStorage(i int) *CustomerLicenseUpdateOne {
	cluo.mutation.AddStorage(i)
	return cluo
}

// SetNumberOfNodes sets the "number_of_nodes" field.
func (cluo *CustomerLicenseUpdateOne) SetNumberOfNodes(i int) *CustomerLicenseUpdateOne {
	cluo.mutation.ResetNumberOfNodes()
	cluo.mutation.SetNumberOfNodes(i)
	return cluo
}

// SetNillableNumberOfNodes sets the "number_of_nodes" field if the given value is not nil.
func (cluo *CustomerLicenseUpdateOne) SetNillableNumberOfNodes(i *int) *CustomerLicenseUpdateOne {
	if i != nil {
		cluo.SetNumberOfNodes(*i)
	}
	return cluo
}

// AddNumberOfNodes adds i to the "number_of_nodes" field.
func (cluo *CustomerLicenseUpdateOne) AddNumberOfNodes(i int) *CustomerLicenseUpdateOne {
	cluo.mutation.AddNumberOfNodes(i)
	return cluo
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (cluo *CustomerLicenseUpdateOne) SetCustomerID(id int) *CustomerLicenseUpdateOne {
	cluo.mutation.SetCustomerID(id)
	return cluo
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (cluo *CustomerLicenseUpdateOne) SetNillableCustomerID(id *int) *CustomerLicenseUpdateOne {
	if id != nil {
		cluo = cluo.SetCustomerID(*id)
	}
	return cluo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (cluo *CustomerLicenseUpdateOne) SetCustomer(c *Customer) *CustomerLicenseUpdateOne {
	return cluo.SetCustomerID(c.ID)
}

// AddLicenseIDs adds the "license" edge to the License entity by IDs.
func (cluo *CustomerLicenseUpdateOne) AddLicenseIDs(ids ...int) *CustomerLicenseUpdateOne {
	cluo.mutation.AddLicenseIDs(ids...)
	return cluo
}

// AddLicense adds the "license" edges to the License entity.
func (cluo *CustomerLicenseUpdateOne) AddLicense(l ...*License) *CustomerLicenseUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cluo.AddLicenseIDs(ids...)
}

// Mutation returns the CustomerLicenseMutation object of the builder.
func (cluo *CustomerLicenseUpdateOne) Mutation() *CustomerLicenseMutation {
	return cluo.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (cluo *CustomerLicenseUpdateOne) ClearCustomer() *CustomerLicenseUpdateOne {
	cluo.mutation.ClearCustomer()
	return cluo
}

// ClearLicense clears all "license" edges to the License entity.
func (cluo *CustomerLicenseUpdateOne) ClearLicense() *CustomerLicenseUpdateOne {
	cluo.mutation.ClearLicense()
	return cluo
}

// RemoveLicenseIDs removes the "license" edge to License entities by IDs.
func (cluo *CustomerLicenseUpdateOne) RemoveLicenseIDs(ids ...int) *CustomerLicenseUpdateOne {
	cluo.mutation.RemoveLicenseIDs(ids...)
	return cluo
}

// RemoveLicense removes "license" edges to License entities.
func (cluo *CustomerLicenseUpdateOne) RemoveLicense(l ...*License) *CustomerLicenseUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cluo.RemoveLicenseIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cluo *CustomerLicenseUpdateOne) Select(field string, fields ...string) *CustomerLicenseUpdateOne {
	cluo.fields = append([]string{field}, fields...)
	return cluo
}

// Save executes the query and returns the updated CustomerLicense entity.
func (cluo *CustomerLicenseUpdateOne) Save(ctx context.Context) (*CustomerLicense, error) {
	var (
		err  error
		node *CustomerLicense
	)
	if len(cluo.hooks) == 0 {
		if err = cluo.check(); err != nil {
			return nil, err
		}
		node, err = cluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomerLicenseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cluo.check(); err != nil {
				return nil, err
			}
			cluo.mutation = mutation
			node, err = cluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cluo.hooks) - 1; i >= 0; i-- {
			if cluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cluo *CustomerLicenseUpdateOne) SaveX(ctx context.Context) *CustomerLicense {
	node, err := cluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cluo *CustomerLicenseUpdateOne) Exec(ctx context.Context) error {
	_, err := cluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cluo *CustomerLicenseUpdateOne) ExecX(ctx context.Context) {
	if err := cluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cluo *CustomerLicenseUpdateOne) check() error {
	if v, ok := cluo.mutation.LicenseCode(); ok {
		if err := customerlicense.LicenseCodeValidator(v); err != nil {
			return &ValidationError{Name: "license_code", err: fmt.Errorf(`ent: validator failed for field "CustomerLicense.license_code": %w`, err)}
		}
	}
	return nil
}

func (cluo *CustomerLicenseUpdateOne) sqlSave(ctx context.Context) (_node *CustomerLicense, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   customerlicense.Table,
			Columns: customerlicense.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: customerlicense.FieldID,
			},
		},
	}
	id, ok := cluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CustomerLicense.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customerlicense.FieldID)
		for _, f := range fields {
			if !customerlicense.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customerlicense.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cluo.mutation.LicenseCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customerlicense.FieldLicenseCode,
		})
	}
	if value, ok := cluo.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: customerlicense.FieldActive,
		})
	}
	if value, ok := cluo.mutation.StartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customerlicense.FieldStartDate,
		})
	}
	if value, ok := cluo.mutation.EndDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customerlicense.FieldEndDate,
		})
	}
	if value, ok := cluo.mutation.CPU(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customerlicense.FieldCPU,
		})
	}
	if value, ok := cluo.mutation.AddedCPU(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customerlicense.FieldCPU,
		})
	}
	if value, ok := cluo.mutation.Storage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customerlicense.FieldStorage,
		})
	}
	if value, ok := cluo.mutation.AddedStorage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customerlicense.FieldStorage,
		})
	}
	if value, ok := cluo.mutation.NumberOfNodes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customerlicense.FieldNumberOfNodes,
		})
	}
	if value, ok := cluo.mutation.AddedNumberOfNodes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customerlicense.FieldNumberOfNodes,
		})
	}
	if cluo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerlicense.CustomerTable,
			Columns: []string{customerlicense.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customerlicense.CustomerTable,
			Columns: []string{customerlicense.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cluo.mutation.LicenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customerlicense.LicenseTable,
			Columns: []string{customerlicense.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: license.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.RemovedLicenseIDs(); len(nodes) > 0 && !cluo.mutation.LicenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customerlicense.LicenseTable,
			Columns: []string{customerlicense.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: license.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.LicenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customerlicense.LicenseTable,
			Columns: []string{customerlicense.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: license.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CustomerLicense{config: cluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customerlicense.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
