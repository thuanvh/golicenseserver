// Code generated by entc, DO NOT EDIT.

package license

import (
	"entgo.io/ent/dialect/sql"
	"github.com/thuanvh/golicenseserver/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// CPU applies equality check predicate on the "cpu" field. It's identical to CPUEQ.
func CPU(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCPU), v))
	})
}

// Storage applies equality check predicate on the "storage" field. It's identical to StorageEQ.
func Storage(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStorage), v))
	})
}

// NumberOfNodes applies equality check predicate on the "number_of_nodes" field. It's identical to NumberOfNodesEQ.
func NumberOfNodes(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumberOfNodes), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.License {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.License(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.License {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.License(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDuration), v))
	})
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.License {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.License(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDuration), v...))
	})
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.License {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.License(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDuration), v...))
	})
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDuration), v))
	})
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDuration), v))
	})
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDuration), v))
	})
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDuration), v))
	})
}

// CPUEQ applies the EQ predicate on the "cpu" field.
func CPUEQ(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCPU), v))
	})
}

// CPUNEQ applies the NEQ predicate on the "cpu" field.
func CPUNEQ(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCPU), v))
	})
}

// CPUIn applies the In predicate on the "cpu" field.
func CPUIn(vs ...int) predicate.License {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.License(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCPU), v...))
	})
}

// CPUNotIn applies the NotIn predicate on the "cpu" field.
func CPUNotIn(vs ...int) predicate.License {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.License(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCPU), v...))
	})
}

// CPUGT applies the GT predicate on the "cpu" field.
func CPUGT(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCPU), v))
	})
}

// CPUGTE applies the GTE predicate on the "cpu" field.
func CPUGTE(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCPU), v))
	})
}

// CPULT applies the LT predicate on the "cpu" field.
func CPULT(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCPU), v))
	})
}

// CPULTE applies the LTE predicate on the "cpu" field.
func CPULTE(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCPU), v))
	})
}

// StorageEQ applies the EQ predicate on the "storage" field.
func StorageEQ(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStorage), v))
	})
}

// StorageNEQ applies the NEQ predicate on the "storage" field.
func StorageNEQ(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStorage), v))
	})
}

// StorageIn applies the In predicate on the "storage" field.
func StorageIn(vs ...int) predicate.License {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.License(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStorage), v...))
	})
}

// StorageNotIn applies the NotIn predicate on the "storage" field.
func StorageNotIn(vs ...int) predicate.License {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.License(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStorage), v...))
	})
}

// StorageGT applies the GT predicate on the "storage" field.
func StorageGT(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStorage), v))
	})
}

// StorageGTE applies the GTE predicate on the "storage" field.
func StorageGTE(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStorage), v))
	})
}

// StorageLT applies the LT predicate on the "storage" field.
func StorageLT(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStorage), v))
	})
}

// StorageLTE applies the LTE predicate on the "storage" field.
func StorageLTE(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStorage), v))
	})
}

// NumberOfNodesEQ applies the EQ predicate on the "number_of_nodes" field.
func NumberOfNodesEQ(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumberOfNodes), v))
	})
}

// NumberOfNodesNEQ applies the NEQ predicate on the "number_of_nodes" field.
func NumberOfNodesNEQ(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNumberOfNodes), v))
	})
}

// NumberOfNodesIn applies the In predicate on the "number_of_nodes" field.
func NumberOfNodesIn(vs ...int) predicate.License {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.License(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNumberOfNodes), v...))
	})
}

// NumberOfNodesNotIn applies the NotIn predicate on the "number_of_nodes" field.
func NumberOfNodesNotIn(vs ...int) predicate.License {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.License(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNumberOfNodes), v...))
	})
}

// NumberOfNodesGT applies the GT predicate on the "number_of_nodes" field.
func NumberOfNodesGT(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNumberOfNodes), v))
	})
}

// NumberOfNodesGTE applies the GTE predicate on the "number_of_nodes" field.
func NumberOfNodesGTE(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNumberOfNodes), v))
	})
}

// NumberOfNodesLT applies the LT predicate on the "number_of_nodes" field.
func NumberOfNodesLT(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNumberOfNodes), v))
	})
}

// NumberOfNodesLTE applies the LTE predicate on the "number_of_nodes" field.
func NumberOfNodesLTE(v int) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNumberOfNodes), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.License) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.License) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.License) predicate.License {
	return predicate.License(func(s *sql.Selector) {
		p(s.Not())
	})
}
