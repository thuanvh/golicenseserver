// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/thuanvh/golicenseserver/ent/customer"
	"github.com/thuanvh/golicenseserver/ent/customerlicense"
)

// CustomerLicense is the model entity for the CustomerLicense schema.
type CustomerLicense struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// LicenseCode holds the value of the "license_code" field.
	LicenseCode string `json:"license_code,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// CPU holds the value of the "cpu" field.
	CPU int `json:"cpu,omitempty"`
	// Storage holds the value of the "storage" field.
	Storage int `json:"storage,omitempty"`
	// NumberOfNodes holds the value of the "number_of_nodes" field.
	NumberOfNodes int `json:"number_of_nodes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomerLicenseQuery when eager-loading is set.
	Edges                     CustomerLicenseEdges `json:"edges"`
	customer_license_customer *int
}

// CustomerLicenseEdges holds the relations/edges for other nodes in the graph.
type CustomerLicenseEdges struct {
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// License holds the value of the license edge.
	License []*License `json:"license,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CustomerLicenseEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[0] {
		if e.Customer == nil {
			// The edge customer was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// LicenseOrErr returns the License value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerLicenseEdges) LicenseOrErr() ([]*License, error) {
	if e.loadedTypes[1] {
		return e.License, nil
	}
	return nil, &NotLoadedError{edge: "license"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CustomerLicense) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case customerlicense.FieldActive:
			values[i] = new(sql.NullBool)
		case customerlicense.FieldID, customerlicense.FieldCPU, customerlicense.FieldStorage, customerlicense.FieldNumberOfNodes:
			values[i] = new(sql.NullInt64)
		case customerlicense.FieldLicenseCode:
			values[i] = new(sql.NullString)
		case customerlicense.FieldStartDate, customerlicense.FieldEndDate:
			values[i] = new(sql.NullTime)
		case customerlicense.ForeignKeys[0]: // customer_license_customer
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CustomerLicense", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CustomerLicense fields.
func (cl *CustomerLicense) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customerlicense.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cl.ID = int(value.Int64)
		case customerlicense.FieldLicenseCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field license_code", values[i])
			} else if value.Valid {
				cl.LicenseCode = value.String
			}
		case customerlicense.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				cl.Active = value.Bool
			}
		case customerlicense.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				cl.StartDate = value.Time
			}
		case customerlicense.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				cl.EndDate = value.Time
			}
		case customerlicense.FieldCPU:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cpu", values[i])
			} else if value.Valid {
				cl.CPU = int(value.Int64)
			}
		case customerlicense.FieldStorage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field storage", values[i])
			} else if value.Valid {
				cl.Storage = int(value.Int64)
			}
		case customerlicense.FieldNumberOfNodes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number_of_nodes", values[i])
			} else if value.Valid {
				cl.NumberOfNodes = int(value.Int64)
			}
		case customerlicense.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field customer_license_customer", value)
			} else if value.Valid {
				cl.customer_license_customer = new(int)
				*cl.customer_license_customer = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCustomer queries the "customer" edge of the CustomerLicense entity.
func (cl *CustomerLicense) QueryCustomer() *CustomerQuery {
	return (&CustomerLicenseClient{config: cl.config}).QueryCustomer(cl)
}

// QueryLicense queries the "license" edge of the CustomerLicense entity.
func (cl *CustomerLicense) QueryLicense() *LicenseQuery {
	return (&CustomerLicenseClient{config: cl.config}).QueryLicense(cl)
}

// Update returns a builder for updating this CustomerLicense.
// Note that you need to call CustomerLicense.Unwrap() before calling this method if this CustomerLicense
// was returned from a transaction, and the transaction was committed or rolled back.
func (cl *CustomerLicense) Update() *CustomerLicenseUpdateOne {
	return (&CustomerLicenseClient{config: cl.config}).UpdateOne(cl)
}

// Unwrap unwraps the CustomerLicense entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cl *CustomerLicense) Unwrap() *CustomerLicense {
	tx, ok := cl.config.driver.(*txDriver)
	if !ok {
		panic("ent: CustomerLicense is not a transactional entity")
	}
	cl.config.driver = tx.drv
	return cl
}

// String implements the fmt.Stringer.
func (cl *CustomerLicense) String() string {
	var builder strings.Builder
	builder.WriteString("CustomerLicense(")
	builder.WriteString(fmt.Sprintf("id=%v", cl.ID))
	builder.WriteString(", license_code=")
	builder.WriteString(cl.LicenseCode)
	builder.WriteString(", active=")
	builder.WriteString(fmt.Sprintf("%v", cl.Active))
	builder.WriteString(", start_date=")
	builder.WriteString(cl.StartDate.Format(time.ANSIC))
	builder.WriteString(", end_date=")
	builder.WriteString(cl.EndDate.Format(time.ANSIC))
	builder.WriteString(", cpu=")
	builder.WriteString(fmt.Sprintf("%v", cl.CPU))
	builder.WriteString(", storage=")
	builder.WriteString(fmt.Sprintf("%v", cl.Storage))
	builder.WriteString(", number_of_nodes=")
	builder.WriteString(fmt.Sprintf("%v", cl.NumberOfNodes))
	builder.WriteByte(')')
	return builder.String()
}

// CustomerLicenses is a parsable slice of CustomerLicense.
type CustomerLicenses []*CustomerLicense

func (cl CustomerLicenses) config(cfg config) {
	for _i := range cl {
		cl[_i].config = cfg
	}
}
